When would you want to use a remote repository rather than keeping all your 
work local?

  I want to do this every time I develop software, because the remote serves 
  as a backup: if my computer fails, I can recover the files from the remote. 
  Here's some other reasons to use a remote:
  1. I can collaborate with other developers who use their own computers and 
  push to the same remote.
  2. Users can download the software from GitHub.
  3. Potential employers can look at my GitHub account to see what I can do.

Why might you want to always pull changes manually rather than having Git 
automatically stay up-to-date with your remote repository?
  
  Bad things can happen if you pull when you have uncommitted changes. Even
  if you don't have uncommitted changes, you should get to a good stopping
  point in your development before pulling, rather than interrupting your
  coding to deal with merge conflicts.  
  
Describe the differences between forks, clones, and branches. When would you 
use one instead of another?  

  Both fork and clone make a complete copy of a repo. The difference is that
  in a fork, both the original and the copy are on GitHub (or some other Git
  server.) A branch is just an additional pointer into a commit history.
  
  The word 'fork' normally means creating a copy that will be developed
  independently from the original. That can happen in GitHub, but many
  forks exist for the purpose of suggesting changes to be merged back into
  the original repo. If the repo owners trust me, they can make me a 
  collaborator, and then I will clone the repo, make changes on my computer,
  and push them to GitHub. If they don't trust me, then I can fork the
  original repo, clone my fork, make changes on my computer, push them to
  my fork on GitHub, and then submit a pull request to the original repo.
  
  I would make a branch any time I want to make changes without overwriting
  current master. This applies both when I'm in charge and when I'm not. 
  Examples:
  1. I'm making a change that's too big for one commit. When I finish the 
  change and the branch is now working correctly, merge it into the master.
  2. I'm trying something and I'm not sure it will work.
  3. I want to have another version.
  
What is the benefit of having a copy of the last known state of the remote 
stored locally?  
  
  It's good to store it locally so I can get to it offline.
  
How would you collaborate without using Git or GitHub? What would be easier, 
and what would be harder?  

  If I was leading a development team without version control, I would keep 
  the code base on a share drive. Members could suggest changes by creating
  a "branch", which would be another folder on the same drive containing a 
  copy of the code base. Members would have to keep track of which files they 
  change, or figure it out by seeing which files have been modified recently. 
  I would manually do all merges into the master branch. I would save old
  versions by creating more folders that each contain the whole code base.
  We would waste a lot of time waiting for the OS to copy the whole code base
  into a new folder, and we might run out of disk space. Manual merges would 
  be harder. The only advantage I see is that no one has to learn Git.

When would you want to make changes in a separate branch rather than directly 
in master? What benefits does each approach have?  

  Any time I'm making changes that I'm not sure will be a permanent part of
  the master, I should make them on a separate branch. Even if my local copy
  is not the official copy, I should keep my master the same as the official
  master in case I need to use it.